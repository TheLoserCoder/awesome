-- ~/.config/awesome/custom/widgets/volume.lua
local gears = require("gears")
local wibox = require("wibox")
local awful = require("awful")

local Volume = {}
Volume.__index = Volume

-- –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local Provider = require("custom.widgets.provider")
local Slider = require("custom.widgets.slider")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
local function run_cmd(cmd)
    local f = io.popen(cmd .. " 2>/dev/null")
    if not f then return nil end
    local out = f:read("*all")
    f:close()
    return out
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
local function get_volume()
    local out = run_cmd("pactl get-sink-volume @DEFAULT_SINK@")
    if out then
        local v = out:match("(%d?%d?%d)%%")
        if v then return tonumber(v) end
    end

    local out2 = run_cmd("amixer get Master")
    if out2 then
        local v2 = out2:match("(%d?%d?%d)%%")
        if v2 then return tonumber(v2) end
    end

    return 0
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ mute
local function is_muted()
    local out = run_cmd("pactl get-sink-mute @DEFAULT_SINK@")
    if out and out:match("yes") then return true end

    local out2 = run_cmd("amixer get Master")
    if out2 and out2:match("%[off%]") then return true end

    return false
end

-- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function Volume.new(config)
    config = config or {}
    local self = setmetatable({}, Volume)
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    self.show_icon = config.show_icon ~= false -- –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    self.width = config.width or 120
    self.update_interval = config.update_interval or 1.0
    self.debounce_timeout = config.debounce_timeout or 0.15
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    self:_create_widgets()
    self:_setup_volume_control()
    self:_setup_sync_timer()
    
    return self
end

-- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
function Volume:_create_widgets()
    -- –ò–∫–æ–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    self.icon = wibox.widget {
        text = "üîä",
        align = "center",
        valign = "center",
        widget = wibox.widget.textbox
    }
    
    -- –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
    local colors = Provider.get_colors()
    
    -- –°–æ–∑–¥–∞–µ–º slider
    self.slider = Slider.new({
        minimum = 0,
        maximum = 100,
        value = get_volume(),
        width = self.width,
        bg_color = colors.surface,
        bar_active_color = colors.accent,
        handle_color = colors.accent
    })
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∫–æ–Ω–∫–∏
    self.icon:buttons(gears.table.join(
        awful.button({}, 1, function()
            awful.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle", false)
        end),
        awful.button({}, 3, function()
            awful.spawn("pactl set-sink-volume @DEFAULT_SINK@ 50%", false)
        end)
    ))
    
    -- –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
    if self.show_icon then
        self.widget = wibox.widget {
            self.icon,
            self.slider.widget,
            spacing = 8,
            layout = wibox.layout.fixed.horizontal
        }
    else
        self.widget = self.slider.widget
    end
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
function Volume:_setup_volume_control()
    -- –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
    self.programmatic_update = false
    
    -- Debounce —Ç–∞–π–º–µ—Ä
    self.pending_volume = nil
    self.set_volume_timer = gears.timer {
        timeout = self.debounce_timeout,
        autostart = false,
        single_shot = true,
        callback = function()
            if self.pending_volume ~= nil then
                awful.spawn("pactl set-sink-volume @DEFAULT_SINK@ " .. self.pending_volume .. "%", false)
                self.pending_volume = nil
            end
        end
    }
    
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è slider
    self.slider:connect_signal("property::value", function()
        if self.programmatic_update then
            self.programmatic_update = false
            return
        end
        
        local value = self.slider:get_value()
        local val = math.floor(value + 0.5)
        if val < 0 then val = 0 end
        if val > 150 then val = 150 end
        self.pending_volume = val
        
        if self.set_volume_timer.started then
            self.set_volume_timer:stop()
        end
        self.set_volume_timer:start()
    end)
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function Volume:_setup_sync_timer()
    gears.timer {
        timeout = self.update_interval,
        autostart = true,
        callback = function()
            local vol = get_volume() or 0
            
            -- –û–±–Ω–æ–≤–ª—è–µ–º slider
            local current_vol = self.slider:get_value()
            if current_vol ~= vol then
                self.programmatic_update = true
                self.slider:set_value(vol)
            end
            
            -- –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            if self.show_icon then
                if is_muted() then
                    self.icon.text = "üîá"
                else
                    if vol == 0 then
                        self.icon.text = "üîà"
                    elseif vol < 60 then
                        self.icon.text = "üîâ"
                    else
                        self.icon.text = "üîä"
                    end
                end
            end
        end
    }
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
function Volume:get_value()
    return self.slider:get_value()
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
function Volume:set_value(value)
    self.slider:set_value(value)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–∫–æ–Ω–∫—É
function Volume:set_show_icon(show)
    self.show_icon = show
    -- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç
    self:_create_widgets()
end

-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
function Volume:connect_signal(signal, callback)
    if signal == "property::value" then
        self.slider:connect_signal(signal, callback)
    else
        self.widget:connect_signal(signal, callback)
    end
end

-- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
function Volume:disconnect_signal(signal, callback)
    if signal == "property::value" then
        self.slider:disconnect_signal(signal, callback)
    else
        self.widget:disconnect_signal(signal, callback)
    end
end

return Volume